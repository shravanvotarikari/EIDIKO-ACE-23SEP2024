

CREATE COMPUTE MODULE MF_Timeout_Ctrl_Compute1
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		--SET OutputRoot = InputRoot;
		

--		
--		SET OutputRoot.XMLNSC.TimeoutRequest.Action = 'SET';
--		SET OutputRoot.XMLNSC.TimeoutRequest.StartTime = CURRENT_TIME;
--		SET OutputRoot.XMLNSC.TimeoutRequest.StartDate = CURRENT_DATE;
--		SET OutputRoot.XMLNSC.TimeoutRequest.Interval = '60';
--		SET OutputRoot.XMLNSC.TimeoutRequest.Count = '2';
--		SET OutputRoot.XMLNSC.TimeoutRequest.IgnoreMissed = 'False';
--		SET OutputRoot.XMLNSC.TimeoutRequest.AllowOverwrite = 'True';
--		SET OutputRoot.XMLNSC.TimeoutRequest.Identifier = 'T1';

		SET OutputLocalEnvironment.TimeoutRequest.Action = 'SET';
		SET OutputLocalEnvironment.TimeoutRequest.StartTime = CURRENT_TIME;
		SET OutputLocalEnvironment.TimeoutRequest.StartDate = CURRENT_DATE;
		SET OutputLocalEnvironment.TimeoutRequest.Interval = '60';
		SET OutputLocalEnvironment.TimeoutRequest.Count = '4';
		SET OutputLocalEnvironment.TimeoutRequest.IgnoreMissed = 'False';
		SET OutputLocalEnvironment.TimeoutRequest.AllowOverwrite = 'True';
		SET OutputLocalEnvironment.TimeoutRequest.Identifier = 'T1';
		
	END;
END MODULE;

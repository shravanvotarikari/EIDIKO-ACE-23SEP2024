PATH Lib_DatabaseLog_Procedure;

DECLARE ns NAMESPACE 'http://www.example.org/NewWSDLFile/';
CREATE COMPUTE MODULE MF_Consumer_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE AccountNumber CHARACTER;
		DECLARE AccountExists INTEGER;
		
		DECLARE acc_no INTEGER;
		--DECLARE accountNO INTEGER InputRoot.JSON.Data.accountNumber;
		
		SET AccountNumber =  InputRoot.JSON.Data.accountNumber;
		SET Environment.var =  InputRoot.JSON.Data.accountNumber;
		SET OutputRoot.JSON.Data.details=Environment.var ;
	--	Propagate to terminal 'out1' delete none;
		
		
		IF AccountNumber IS NULL THEN
          THROW USER EXCEPTION VALUES('Account number does not exist');
        ELSEIF LENGTH(AccountNumber) <> 10 THEN
          THROW USER EXCEPTION VALUES('Invalid account number: must be 10 digits');
        END IF;
        
        SET AccountExists = (SELECT COUNT(*) FROM Database.balance_details AS B WHERE B.acc_no = AccountNumber);

        IF AccountExists = 0 THEN
          THROW USER EXCEPTION VALUES('Account number does not exist in the database');
        END IF;
        
		DECLARE Payload CHARACTER;
		SET Payload = CAST(ASBITSTREAM(InputRoot.JSON.Data) AS CHARACTER CCSID 1208 ENCODING 546);
		call Insert_Data_BE(Payload, CURRENT_TIMESTAMP, 1, MessageFlowLabel, ApplicationLabel,'Channel_Request');	
		
       DECLARE outref REFERENCE TO OutputRoot.SOAP.Body.ns:NewOperation.accountNumber;
        SET OutputRoot.SOAP.Body.ns:NewOperation.accountNumber = InputRoot.JSON.Data.accountNumber;
        SET Payload = CAST(ASBITSTREAM(outref) AS CHARACTER CCSID 1208 ENCODING 546);
      call Insert_Data_BE(Payload, CURRENT_TIMESTAMP, 1, MessageFlowLabel, ApplicationLabel,'Backend_Request');	
	END;
	
END MODULE;

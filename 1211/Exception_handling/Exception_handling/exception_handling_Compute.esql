



BROKER SCHEMA Exception_handling

DECLARE exception_text CHARACTER;

CREATE COMPUTE MODULE exception_handling_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--SET Environment.variables.val3 = 3;
		
		CALL CopyEntireMessage();
		CALL log2();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN

		DECLARE exce REFERENCE TO InputExceptionList.[1];

		WHILE LASTMOVE(exce) DO

			if(exce.Number is NOT NULL) THEN
			SET exception_text = exce.Text;
		End if;

		MOVE exce LASTCHILD;
	END WHILE;

	SET OutputRoot.XMLNSC.root.exception_text = exception_text;


END;

CREATE PROCEDURE log2 ()
BEGIN
	DECLARE REQUESTID CHARACTER InputLocalEnvironment.Destination.HTTP.RequestIdentifier;
	DECLARE log_point CHARACTER 'Failure at Input node';
	DECLARE log_time TIMESTAMP CURRENT_TIMESTAMP;
	DECLARE application_name CHARACTER ApplicationLabel;
	DECLARE messageflow_name CHARACTER MessageFlowLabel;
	DECLARE payload CHARACTER exception_text;
	DECLARE status CHARACTER 'Failure';

	CALL db_log(REQUESTID,log_point,log_time,application_name,messageflow_name,payload,status);

END;



END MODULE;


CREATE PROCEDURE db_log (IN REQUESTID CHARACTER
,IN LOG_POINT CHARACTER
,IN LOG_TIME TIMESTAMP
,IN APPLICATION_NAME CHARACTER
,IN MESSAGEFLOW_NAME CHARACTER
,IN PAYLOAD CHARACTER
,IN STATUS CHARACTER )
LANGUAGE DATABASE
EXTERNAL NAME LOAN_APP_LOG_PROCEDURE;

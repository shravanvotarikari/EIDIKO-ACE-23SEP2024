
DECLARE var_path CHARACTER 'C:\temp\logs\Log4jConfigurationFile.xml';
DECLARE var BOOLEAN;
CREATE COMPUTE MODULE MF_Log4j_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL init_log4j(var_path) INTO var;
		
		 CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		 
		 CALL write_log(MessageFlowLabel,'dco_debug','DEBUG','Ashar') INTO var;
		 
		RETURN TRUE;
		
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
		
		
		
	END;

	
END MODULE;

CREATE FUNCTION init_log4j (IN var_path CHARACTER) RETURNS BOOLEAN
LANGUAGE JAVA
EXTERNAL NAME "com.ibm.broker.IAM3.Log4jNode.initLog4j";


CREATE PROCEDURE write_log ( in mfname CHARACTER, in logger_name CHARACTER, in level CHARACTER, in data CHARACTER ) RETURNS BOOLEAN
LANGUAGE JAVA
EXTERNAL NAME "com.ibm.broker.IAM3.Log4jNode.log";



CREATE COMPUTE MODULE MF_Log4j_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

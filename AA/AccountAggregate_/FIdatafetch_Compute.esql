

CREATE COMPUTE MODULE FIdatafetch_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		if not  CONTAINS(InputRoot.HTTPInputHeader."X-Original-HTTP-Command",'POST') then
			throw User exception VALUES('invalid method used');
		end if;
		CALL init_log4j(var_path) INTO isSuccessful;
		CALL write_log(MessageFlowLabel,'fi_data_fetch','INFO','*******************************Start***************************************') INTO isSuccessful;
		CALL write_log(MessageFlowLabel,'fi_data_fetch','INFO', 'Fi Data Fetch Request') INTO isSuccessful;
		CALL write_log(MessageFlowLabel,'fi_data_fetch','INFO', cast(ASBITSTREAM(InputRoot.JSON.Data) as CHARACTER CCSID 1208 ENCODING 546)) INTO isSuccessful;
		CALL write_log(MessageFlowLabel,'fi_data_fetch','INFO',' -----------------------------------------------------------------------') INTO isSuccessful;
		
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		DECLARE DSN row;
		set DSN.RRB[] = SELECT * FROM Database.RRBDSN.system.RRB_DSN AS d WHERE d.BANK_ID = InputRoot.JSON.Data.bankID;
		--SET BANK_CODE = DSN.RRB[1].BANK_CODE;
		declare DSN_Name CHARACTER DSN.RRB[1].DSN;
		declare schema_name CHARACTER DSN.RRB[1].SCHEMA;
		
		create FIELD Environment.XMLNSC.root ;
		DECLARE xmlref REFERENCE to Environment.XMLNSC.root ;
		set xmlref.data = 'somedata';
		
		set OutputRoot.JSON.Data.status = 'success';
		set OutputRoot.JSON.Data.data = cast(ASBITSTREAM(Environment.XMLNSC) as CHARACTER CCSID 1208 ENCODING 546);
		
		CALL init_log4j(var_path) INTO isSuccessful;
		CALL write_log(MessageFlowLabel,'fi_data_fetch','INFO',' -----------------------------------------------------------------------') INTO isSuccessful;
		CALL write_log(MessageFlowLabel,'fi_data_fetch','INFO', 'Fi Data Fetch Response') INTO isSuccessful;
		CALL write_log(MessageFlowLabel,'fi_data_fetch','INFO', cast(ASBITSTREAM(OutputRoot.JSON.Data) as CHARACTER CCSID 1208 ENCODING 546)) INTO isSuccessful;
		CALL write_log(MessageFlowLabel,'fi_data_fetch','INFO','*******************************END***************************************') INTO isSuccessful;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
